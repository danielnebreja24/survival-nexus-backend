
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Survivor
 * 
 */
export type Survivor = $Result.DefaultSelection<Prisma.$SurvivorPayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model SurvivorItem
 * 
 */
export type SurvivorItem = $Result.DefaultSelection<Prisma.$SurvivorItemPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Survivors
 * const survivors = await prisma.survivor.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Survivors
   * const survivors = await prisma.survivor.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.survivor`: Exposes CRUD operations for the **Survivor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Survivors
    * const survivors = await prisma.survivor.findMany()
    * ```
    */
  get survivor(): Prisma.SurvivorDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.survivorItem`: Exposes CRUD operations for the **SurvivorItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SurvivorItems
    * const survivorItems = await prisma.survivorItem.findMany()
    * ```
    */
  get survivorItem(): Prisma.SurvivorItemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Survivor: 'Survivor',
    Item: 'Item',
    SurvivorItem: 'SurvivorItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "survivor" | "item" | "survivorItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Survivor: {
        payload: Prisma.$SurvivorPayload<ExtArgs>
        fields: Prisma.SurvivorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurvivorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurvivorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          findFirst: {
            args: Prisma.SurvivorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurvivorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          findMany: {
            args: Prisma.SurvivorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>[]
          }
          create: {
            args: Prisma.SurvivorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          createMany: {
            args: Prisma.SurvivorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SurvivorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          update: {
            args: Prisma.SurvivorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          deleteMany: {
            args: Prisma.SurvivorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurvivorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SurvivorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorPayload>
          }
          aggregate: {
            args: Prisma.SurvivorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurvivor>
          }
          groupBy: {
            args: Prisma.SurvivorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurvivorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurvivorCountArgs<ExtArgs>
            result: $Utils.Optional<SurvivorCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      SurvivorItem: {
        payload: Prisma.$SurvivorItemPayload<ExtArgs>
        fields: Prisma.SurvivorItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurvivorItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurvivorItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          findFirst: {
            args: Prisma.SurvivorItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurvivorItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          findMany: {
            args: Prisma.SurvivorItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>[]
          }
          create: {
            args: Prisma.SurvivorItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          createMany: {
            args: Prisma.SurvivorItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SurvivorItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          update: {
            args: Prisma.SurvivorItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          deleteMany: {
            args: Prisma.SurvivorItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurvivorItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SurvivorItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurvivorItemPayload>
          }
          aggregate: {
            args: Prisma.SurvivorItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurvivorItem>
          }
          groupBy: {
            args: Prisma.SurvivorItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurvivorItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurvivorItemCountArgs<ExtArgs>
            result: $Utils.Optional<SurvivorItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SurvivorCountOutputType
   */

  export type SurvivorCountOutputType = {
    inventory: number
  }

  export type SurvivorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | SurvivorCountOutputTypeCountInventoryArgs
  }

  // Custom InputTypes
  /**
   * SurvivorCountOutputType without action
   */
  export type SurvivorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorCountOutputType
     */
    select?: SurvivorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SurvivorCountOutputType without action
   */
  export type SurvivorCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurvivorItemWhereInput
  }


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    survivorItems: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survivorItems?: boolean | ItemCountOutputTypeCountSurvivorItemsArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountSurvivorItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurvivorItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Survivor
   */

  export type AggregateSurvivor = {
    _count: SurvivorCountAggregateOutputType | null
    _avg: SurvivorAvgAggregateOutputType | null
    _sum: SurvivorSumAggregateOutputType | null
    _min: SurvivorMinAggregateOutputType | null
    _max: SurvivorMaxAggregateOutputType | null
  }

  export type SurvivorAvgAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type SurvivorSumAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type SurvivorMinAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    gender: string | null
    infected: boolean | null
  }

  export type SurvivorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    age: number | null
    gender: string | null
    infected: boolean | null
  }

  export type SurvivorCountAggregateOutputType = {
    id: number
    name: number
    age: number
    gender: number
    lastLocation: number
    infected: number
    _all: number
  }


  export type SurvivorAvgAggregateInputType = {
    id?: true
    age?: true
  }

  export type SurvivorSumAggregateInputType = {
    id?: true
    age?: true
  }

  export type SurvivorMinAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    infected?: true
  }

  export type SurvivorMaxAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    infected?: true
  }

  export type SurvivorCountAggregateInputType = {
    id?: true
    name?: true
    age?: true
    gender?: true
    lastLocation?: true
    infected?: true
    _all?: true
  }

  export type SurvivorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Survivor to aggregate.
     */
    where?: SurvivorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Survivors to fetch.
     */
    orderBy?: SurvivorOrderByWithRelationInput | SurvivorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurvivorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Survivors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Survivors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Survivors
    **/
    _count?: true | SurvivorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurvivorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurvivorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurvivorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurvivorMaxAggregateInputType
  }

  export type GetSurvivorAggregateType<T extends SurvivorAggregateArgs> = {
        [P in keyof T & keyof AggregateSurvivor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurvivor[P]>
      : GetScalarType<T[P], AggregateSurvivor[P]>
  }




  export type SurvivorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurvivorWhereInput
    orderBy?: SurvivorOrderByWithAggregationInput | SurvivorOrderByWithAggregationInput[]
    by: SurvivorScalarFieldEnum[] | SurvivorScalarFieldEnum
    having?: SurvivorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurvivorCountAggregateInputType | true
    _avg?: SurvivorAvgAggregateInputType
    _sum?: SurvivorSumAggregateInputType
    _min?: SurvivorMinAggregateInputType
    _max?: SurvivorMaxAggregateInputType
  }

  export type SurvivorGroupByOutputType = {
    id: number
    name: string
    age: number
    gender: string
    lastLocation: JsonValue
    infected: boolean
    _count: SurvivorCountAggregateOutputType | null
    _avg: SurvivorAvgAggregateOutputType | null
    _sum: SurvivorSumAggregateOutputType | null
    _min: SurvivorMinAggregateOutputType | null
    _max: SurvivorMaxAggregateOutputType | null
  }

  type GetSurvivorGroupByPayload<T extends SurvivorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurvivorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurvivorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurvivorGroupByOutputType[P]>
            : GetScalarType<T[P], SurvivorGroupByOutputType[P]>
        }
      >
    >


  export type SurvivorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    lastLocation?: boolean
    infected?: boolean
    inventory?: boolean | Survivor$inventoryArgs<ExtArgs>
    _count?: boolean | SurvivorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["survivor"]>


  export type SurvivorSelectScalar = {
    id?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    lastLocation?: boolean
    infected?: boolean
  }

  export type SurvivorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | Survivor$inventoryArgs<ExtArgs>
    _count?: boolean | SurvivorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SurvivorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Survivor"
    objects: {
      inventory: Prisma.$SurvivorItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      age: number
      gender: string
      lastLocation: Prisma.JsonValue
      infected: boolean
    }, ExtArgs["result"]["survivor"]>
    composites: {}
  }

  type SurvivorGetPayload<S extends boolean | null | undefined | SurvivorDefaultArgs> = $Result.GetResult<Prisma.$SurvivorPayload, S>

  type SurvivorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SurvivorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SurvivorCountAggregateInputType | true
    }

  export interface SurvivorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Survivor'], meta: { name: 'Survivor' } }
    /**
     * Find zero or one Survivor that matches the filter.
     * @param {SurvivorFindUniqueArgs} args - Arguments to find a Survivor
     * @example
     * // Get one Survivor
     * const survivor = await prisma.survivor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurvivorFindUniqueArgs>(args: SelectSubset<T, SurvivorFindUniqueArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Survivor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SurvivorFindUniqueOrThrowArgs} args - Arguments to find a Survivor
     * @example
     * // Get one Survivor
     * const survivor = await prisma.survivor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurvivorFindUniqueOrThrowArgs>(args: SelectSubset<T, SurvivorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Survivor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorFindFirstArgs} args - Arguments to find a Survivor
     * @example
     * // Get one Survivor
     * const survivor = await prisma.survivor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurvivorFindFirstArgs>(args?: SelectSubset<T, SurvivorFindFirstArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Survivor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorFindFirstOrThrowArgs} args - Arguments to find a Survivor
     * @example
     * // Get one Survivor
     * const survivor = await prisma.survivor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurvivorFindFirstOrThrowArgs>(args?: SelectSubset<T, SurvivorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Survivors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Survivors
     * const survivors = await prisma.survivor.findMany()
     * 
     * // Get first 10 Survivors
     * const survivors = await prisma.survivor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const survivorWithIdOnly = await prisma.survivor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurvivorFindManyArgs>(args?: SelectSubset<T, SurvivorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Survivor.
     * @param {SurvivorCreateArgs} args - Arguments to create a Survivor.
     * @example
     * // Create one Survivor
     * const Survivor = await prisma.survivor.create({
     *   data: {
     *     // ... data to create a Survivor
     *   }
     * })
     * 
     */
    create<T extends SurvivorCreateArgs>(args: SelectSubset<T, SurvivorCreateArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Survivors.
     * @param {SurvivorCreateManyArgs} args - Arguments to create many Survivors.
     * @example
     * // Create many Survivors
     * const survivor = await prisma.survivor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurvivorCreateManyArgs>(args?: SelectSubset<T, SurvivorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Survivor.
     * @param {SurvivorDeleteArgs} args - Arguments to delete one Survivor.
     * @example
     * // Delete one Survivor
     * const Survivor = await prisma.survivor.delete({
     *   where: {
     *     // ... filter to delete one Survivor
     *   }
     * })
     * 
     */
    delete<T extends SurvivorDeleteArgs>(args: SelectSubset<T, SurvivorDeleteArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Survivor.
     * @param {SurvivorUpdateArgs} args - Arguments to update one Survivor.
     * @example
     * // Update one Survivor
     * const survivor = await prisma.survivor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurvivorUpdateArgs>(args: SelectSubset<T, SurvivorUpdateArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Survivors.
     * @param {SurvivorDeleteManyArgs} args - Arguments to filter Survivors to delete.
     * @example
     * // Delete a few Survivors
     * const { count } = await prisma.survivor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurvivorDeleteManyArgs>(args?: SelectSubset<T, SurvivorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Survivors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Survivors
     * const survivor = await prisma.survivor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurvivorUpdateManyArgs>(args: SelectSubset<T, SurvivorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Survivor.
     * @param {SurvivorUpsertArgs} args - Arguments to update or create a Survivor.
     * @example
     * // Update or create a Survivor
     * const survivor = await prisma.survivor.upsert({
     *   create: {
     *     // ... data to create a Survivor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Survivor we want to update
     *   }
     * })
     */
    upsert<T extends SurvivorUpsertArgs>(args: SelectSubset<T, SurvivorUpsertArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Survivors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorCountArgs} args - Arguments to filter Survivors to count.
     * @example
     * // Count the number of Survivors
     * const count = await prisma.survivor.count({
     *   where: {
     *     // ... the filter for the Survivors we want to count
     *   }
     * })
    **/
    count<T extends SurvivorCountArgs>(
      args?: Subset<T, SurvivorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurvivorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Survivor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurvivorAggregateArgs>(args: Subset<T, SurvivorAggregateArgs>): Prisma.PrismaPromise<GetSurvivorAggregateType<T>>

    /**
     * Group by Survivor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurvivorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurvivorGroupByArgs['orderBy'] }
        : { orderBy?: SurvivorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurvivorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurvivorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Survivor model
   */
  readonly fields: SurvivorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Survivor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurvivorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends Survivor$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Survivor$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Survivor model
   */ 
  interface SurvivorFieldRefs {
    readonly id: FieldRef<"Survivor", 'Int'>
    readonly name: FieldRef<"Survivor", 'String'>
    readonly age: FieldRef<"Survivor", 'Int'>
    readonly gender: FieldRef<"Survivor", 'String'>
    readonly lastLocation: FieldRef<"Survivor", 'Json'>
    readonly infected: FieldRef<"Survivor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Survivor findUnique
   */
  export type SurvivorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter, which Survivor to fetch.
     */
    where: SurvivorWhereUniqueInput
  }

  /**
   * Survivor findUniqueOrThrow
   */
  export type SurvivorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter, which Survivor to fetch.
     */
    where: SurvivorWhereUniqueInput
  }

  /**
   * Survivor findFirst
   */
  export type SurvivorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter, which Survivor to fetch.
     */
    where?: SurvivorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Survivors to fetch.
     */
    orderBy?: SurvivorOrderByWithRelationInput | SurvivorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Survivors.
     */
    cursor?: SurvivorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Survivors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Survivors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Survivors.
     */
    distinct?: SurvivorScalarFieldEnum | SurvivorScalarFieldEnum[]
  }

  /**
   * Survivor findFirstOrThrow
   */
  export type SurvivorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter, which Survivor to fetch.
     */
    where?: SurvivorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Survivors to fetch.
     */
    orderBy?: SurvivorOrderByWithRelationInput | SurvivorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Survivors.
     */
    cursor?: SurvivorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Survivors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Survivors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Survivors.
     */
    distinct?: SurvivorScalarFieldEnum | SurvivorScalarFieldEnum[]
  }

  /**
   * Survivor findMany
   */
  export type SurvivorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter, which Survivors to fetch.
     */
    where?: SurvivorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Survivors to fetch.
     */
    orderBy?: SurvivorOrderByWithRelationInput | SurvivorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Survivors.
     */
    cursor?: SurvivorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Survivors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Survivors.
     */
    skip?: number
    distinct?: SurvivorScalarFieldEnum | SurvivorScalarFieldEnum[]
  }

  /**
   * Survivor create
   */
  export type SurvivorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * The data needed to create a Survivor.
     */
    data: XOR<SurvivorCreateInput, SurvivorUncheckedCreateInput>
  }

  /**
   * Survivor createMany
   */
  export type SurvivorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Survivors.
     */
    data: SurvivorCreateManyInput | SurvivorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Survivor update
   */
  export type SurvivorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * The data needed to update a Survivor.
     */
    data: XOR<SurvivorUpdateInput, SurvivorUncheckedUpdateInput>
    /**
     * Choose, which Survivor to update.
     */
    where: SurvivorWhereUniqueInput
  }

  /**
   * Survivor updateMany
   */
  export type SurvivorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Survivors.
     */
    data: XOR<SurvivorUpdateManyMutationInput, SurvivorUncheckedUpdateManyInput>
    /**
     * Filter which Survivors to update
     */
    where?: SurvivorWhereInput
  }

  /**
   * Survivor upsert
   */
  export type SurvivorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * The filter to search for the Survivor to update in case it exists.
     */
    where: SurvivorWhereUniqueInput
    /**
     * In case the Survivor found by the `where` argument doesn't exist, create a new Survivor with this data.
     */
    create: XOR<SurvivorCreateInput, SurvivorUncheckedCreateInput>
    /**
     * In case the Survivor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurvivorUpdateInput, SurvivorUncheckedUpdateInput>
  }

  /**
   * Survivor delete
   */
  export type SurvivorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
    /**
     * Filter which Survivor to delete.
     */
    where: SurvivorWhereUniqueInput
  }

  /**
   * Survivor deleteMany
   */
  export type SurvivorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Survivors to delete
     */
    where?: SurvivorWhereInput
  }

  /**
   * Survivor.inventory
   */
  export type Survivor$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    where?: SurvivorItemWhereInput
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    cursor?: SurvivorItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurvivorItemScalarFieldEnum | SurvivorItemScalarFieldEnum[]
  }

  /**
   * Survivor without action
   */
  export type SurvivorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survivor
     */
    select?: SurvivorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    name: string
    description: string | null
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    survivorItems?: boolean | Item$survivorItemsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>


  export type ItemSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survivorItems?: boolean | Item$survivorItemsArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      survivorItems: Prisma.$SurvivorItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survivorItems<T extends Item$survivorItemsArgs<ExtArgs> = {}>(args?: Subset<T, Item$survivorItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly name: FieldRef<"Item", 'String'>
    readonly description: FieldRef<"Item", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item.survivorItems
   */
  export type Item$survivorItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    where?: SurvivorItemWhereInput
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    cursor?: SurvivorItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurvivorItemScalarFieldEnum | SurvivorItemScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model SurvivorItem
   */

  export type AggregateSurvivorItem = {
    _count: SurvivorItemCountAggregateOutputType | null
    _avg: SurvivorItemAvgAggregateOutputType | null
    _sum: SurvivorItemSumAggregateOutputType | null
    _min: SurvivorItemMinAggregateOutputType | null
    _max: SurvivorItemMaxAggregateOutputType | null
  }

  export type SurvivorItemAvgAggregateOutputType = {
    id: number | null
    survivorId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type SurvivorItemSumAggregateOutputType = {
    id: number | null
    survivorId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type SurvivorItemMinAggregateOutputType = {
    id: number | null
    survivorId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type SurvivorItemMaxAggregateOutputType = {
    id: number | null
    survivorId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type SurvivorItemCountAggregateOutputType = {
    id: number
    survivorId: number
    itemId: number
    quantity: number
    _all: number
  }


  export type SurvivorItemAvgAggregateInputType = {
    id?: true
    survivorId?: true
    itemId?: true
    quantity?: true
  }

  export type SurvivorItemSumAggregateInputType = {
    id?: true
    survivorId?: true
    itemId?: true
    quantity?: true
  }

  export type SurvivorItemMinAggregateInputType = {
    id?: true
    survivorId?: true
    itemId?: true
    quantity?: true
  }

  export type SurvivorItemMaxAggregateInputType = {
    id?: true
    survivorId?: true
    itemId?: true
    quantity?: true
  }

  export type SurvivorItemCountAggregateInputType = {
    id?: true
    survivorId?: true
    itemId?: true
    quantity?: true
    _all?: true
  }

  export type SurvivorItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurvivorItem to aggregate.
     */
    where?: SurvivorItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurvivorItems to fetch.
     */
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurvivorItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurvivorItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurvivorItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SurvivorItems
    **/
    _count?: true | SurvivorItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurvivorItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurvivorItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurvivorItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurvivorItemMaxAggregateInputType
  }

  export type GetSurvivorItemAggregateType<T extends SurvivorItemAggregateArgs> = {
        [P in keyof T & keyof AggregateSurvivorItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurvivorItem[P]>
      : GetScalarType<T[P], AggregateSurvivorItem[P]>
  }




  export type SurvivorItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurvivorItemWhereInput
    orderBy?: SurvivorItemOrderByWithAggregationInput | SurvivorItemOrderByWithAggregationInput[]
    by: SurvivorItemScalarFieldEnum[] | SurvivorItemScalarFieldEnum
    having?: SurvivorItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurvivorItemCountAggregateInputType | true
    _avg?: SurvivorItemAvgAggregateInputType
    _sum?: SurvivorItemSumAggregateInputType
    _min?: SurvivorItemMinAggregateInputType
    _max?: SurvivorItemMaxAggregateInputType
  }

  export type SurvivorItemGroupByOutputType = {
    id: number
    survivorId: number
    itemId: number
    quantity: number
    _count: SurvivorItemCountAggregateOutputType | null
    _avg: SurvivorItemAvgAggregateOutputType | null
    _sum: SurvivorItemSumAggregateOutputType | null
    _min: SurvivorItemMinAggregateOutputType | null
    _max: SurvivorItemMaxAggregateOutputType | null
  }

  type GetSurvivorItemGroupByPayload<T extends SurvivorItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurvivorItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurvivorItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurvivorItemGroupByOutputType[P]>
            : GetScalarType<T[P], SurvivorItemGroupByOutputType[P]>
        }
      >
    >


  export type SurvivorItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    survivorId?: boolean
    itemId?: boolean
    quantity?: boolean
    survivor?: boolean | SurvivorDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["survivorItem"]>


  export type SurvivorItemSelectScalar = {
    id?: boolean
    survivorId?: boolean
    itemId?: boolean
    quantity?: boolean
  }

  export type SurvivorItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survivor?: boolean | SurvivorDefaultArgs<ExtArgs>
    item?: boolean | ItemDefaultArgs<ExtArgs>
  }

  export type $SurvivorItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SurvivorItem"
    objects: {
      survivor: Prisma.$SurvivorPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      survivorId: number
      itemId: number
      quantity: number
    }, ExtArgs["result"]["survivorItem"]>
    composites: {}
  }

  type SurvivorItemGetPayload<S extends boolean | null | undefined | SurvivorItemDefaultArgs> = $Result.GetResult<Prisma.$SurvivorItemPayload, S>

  type SurvivorItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SurvivorItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SurvivorItemCountAggregateInputType | true
    }

  export interface SurvivorItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurvivorItem'], meta: { name: 'SurvivorItem' } }
    /**
     * Find zero or one SurvivorItem that matches the filter.
     * @param {SurvivorItemFindUniqueArgs} args - Arguments to find a SurvivorItem
     * @example
     * // Get one SurvivorItem
     * const survivorItem = await prisma.survivorItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurvivorItemFindUniqueArgs>(args: SelectSubset<T, SurvivorItemFindUniqueArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SurvivorItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SurvivorItemFindUniqueOrThrowArgs} args - Arguments to find a SurvivorItem
     * @example
     * // Get one SurvivorItem
     * const survivorItem = await prisma.survivorItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurvivorItemFindUniqueOrThrowArgs>(args: SelectSubset<T, SurvivorItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SurvivorItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemFindFirstArgs} args - Arguments to find a SurvivorItem
     * @example
     * // Get one SurvivorItem
     * const survivorItem = await prisma.survivorItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurvivorItemFindFirstArgs>(args?: SelectSubset<T, SurvivorItemFindFirstArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SurvivorItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemFindFirstOrThrowArgs} args - Arguments to find a SurvivorItem
     * @example
     * // Get one SurvivorItem
     * const survivorItem = await prisma.survivorItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurvivorItemFindFirstOrThrowArgs>(args?: SelectSubset<T, SurvivorItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SurvivorItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SurvivorItems
     * const survivorItems = await prisma.survivorItem.findMany()
     * 
     * // Get first 10 SurvivorItems
     * const survivorItems = await prisma.survivorItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const survivorItemWithIdOnly = await prisma.survivorItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurvivorItemFindManyArgs>(args?: SelectSubset<T, SurvivorItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SurvivorItem.
     * @param {SurvivorItemCreateArgs} args - Arguments to create a SurvivorItem.
     * @example
     * // Create one SurvivorItem
     * const SurvivorItem = await prisma.survivorItem.create({
     *   data: {
     *     // ... data to create a SurvivorItem
     *   }
     * })
     * 
     */
    create<T extends SurvivorItemCreateArgs>(args: SelectSubset<T, SurvivorItemCreateArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SurvivorItems.
     * @param {SurvivorItemCreateManyArgs} args - Arguments to create many SurvivorItems.
     * @example
     * // Create many SurvivorItems
     * const survivorItem = await prisma.survivorItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurvivorItemCreateManyArgs>(args?: SelectSubset<T, SurvivorItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SurvivorItem.
     * @param {SurvivorItemDeleteArgs} args - Arguments to delete one SurvivorItem.
     * @example
     * // Delete one SurvivorItem
     * const SurvivorItem = await prisma.survivorItem.delete({
     *   where: {
     *     // ... filter to delete one SurvivorItem
     *   }
     * })
     * 
     */
    delete<T extends SurvivorItemDeleteArgs>(args: SelectSubset<T, SurvivorItemDeleteArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SurvivorItem.
     * @param {SurvivorItemUpdateArgs} args - Arguments to update one SurvivorItem.
     * @example
     * // Update one SurvivorItem
     * const survivorItem = await prisma.survivorItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurvivorItemUpdateArgs>(args: SelectSubset<T, SurvivorItemUpdateArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SurvivorItems.
     * @param {SurvivorItemDeleteManyArgs} args - Arguments to filter SurvivorItems to delete.
     * @example
     * // Delete a few SurvivorItems
     * const { count } = await prisma.survivorItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurvivorItemDeleteManyArgs>(args?: SelectSubset<T, SurvivorItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurvivorItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SurvivorItems
     * const survivorItem = await prisma.survivorItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurvivorItemUpdateManyArgs>(args: SelectSubset<T, SurvivorItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SurvivorItem.
     * @param {SurvivorItemUpsertArgs} args - Arguments to update or create a SurvivorItem.
     * @example
     * // Update or create a SurvivorItem
     * const survivorItem = await prisma.survivorItem.upsert({
     *   create: {
     *     // ... data to create a SurvivorItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SurvivorItem we want to update
     *   }
     * })
     */
    upsert<T extends SurvivorItemUpsertArgs>(args: SelectSubset<T, SurvivorItemUpsertArgs<ExtArgs>>): Prisma__SurvivorItemClient<$Result.GetResult<Prisma.$SurvivorItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SurvivorItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemCountArgs} args - Arguments to filter SurvivorItems to count.
     * @example
     * // Count the number of SurvivorItems
     * const count = await prisma.survivorItem.count({
     *   where: {
     *     // ... the filter for the SurvivorItems we want to count
     *   }
     * })
    **/
    count<T extends SurvivorItemCountArgs>(
      args?: Subset<T, SurvivorItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurvivorItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SurvivorItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurvivorItemAggregateArgs>(args: Subset<T, SurvivorItemAggregateArgs>): Prisma.PrismaPromise<GetSurvivorItemAggregateType<T>>

    /**
     * Group by SurvivorItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurvivorItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurvivorItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurvivorItemGroupByArgs['orderBy'] }
        : { orderBy?: SurvivorItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurvivorItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurvivorItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SurvivorItem model
   */
  readonly fields: SurvivorItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SurvivorItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurvivorItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survivor<T extends SurvivorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurvivorDefaultArgs<ExtArgs>>): Prisma__SurvivorClient<$Result.GetResult<Prisma.$SurvivorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SurvivorItem model
   */ 
  interface SurvivorItemFieldRefs {
    readonly id: FieldRef<"SurvivorItem", 'Int'>
    readonly survivorId: FieldRef<"SurvivorItem", 'Int'>
    readonly itemId: FieldRef<"SurvivorItem", 'Int'>
    readonly quantity: FieldRef<"SurvivorItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SurvivorItem findUnique
   */
  export type SurvivorItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter, which SurvivorItem to fetch.
     */
    where: SurvivorItemWhereUniqueInput
  }

  /**
   * SurvivorItem findUniqueOrThrow
   */
  export type SurvivorItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter, which SurvivorItem to fetch.
     */
    where: SurvivorItemWhereUniqueInput
  }

  /**
   * SurvivorItem findFirst
   */
  export type SurvivorItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter, which SurvivorItem to fetch.
     */
    where?: SurvivorItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurvivorItems to fetch.
     */
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurvivorItems.
     */
    cursor?: SurvivorItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurvivorItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurvivorItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurvivorItems.
     */
    distinct?: SurvivorItemScalarFieldEnum | SurvivorItemScalarFieldEnum[]
  }

  /**
   * SurvivorItem findFirstOrThrow
   */
  export type SurvivorItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter, which SurvivorItem to fetch.
     */
    where?: SurvivorItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurvivorItems to fetch.
     */
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurvivorItems.
     */
    cursor?: SurvivorItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurvivorItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurvivorItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurvivorItems.
     */
    distinct?: SurvivorItemScalarFieldEnum | SurvivorItemScalarFieldEnum[]
  }

  /**
   * SurvivorItem findMany
   */
  export type SurvivorItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter, which SurvivorItems to fetch.
     */
    where?: SurvivorItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurvivorItems to fetch.
     */
    orderBy?: SurvivorItemOrderByWithRelationInput | SurvivorItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SurvivorItems.
     */
    cursor?: SurvivorItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurvivorItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurvivorItems.
     */
    skip?: number
    distinct?: SurvivorItemScalarFieldEnum | SurvivorItemScalarFieldEnum[]
  }

  /**
   * SurvivorItem create
   */
  export type SurvivorItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * The data needed to create a SurvivorItem.
     */
    data: XOR<SurvivorItemCreateInput, SurvivorItemUncheckedCreateInput>
  }

  /**
   * SurvivorItem createMany
   */
  export type SurvivorItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SurvivorItems.
     */
    data: SurvivorItemCreateManyInput | SurvivorItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SurvivorItem update
   */
  export type SurvivorItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * The data needed to update a SurvivorItem.
     */
    data: XOR<SurvivorItemUpdateInput, SurvivorItemUncheckedUpdateInput>
    /**
     * Choose, which SurvivorItem to update.
     */
    where: SurvivorItemWhereUniqueInput
  }

  /**
   * SurvivorItem updateMany
   */
  export type SurvivorItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SurvivorItems.
     */
    data: XOR<SurvivorItemUpdateManyMutationInput, SurvivorItemUncheckedUpdateManyInput>
    /**
     * Filter which SurvivorItems to update
     */
    where?: SurvivorItemWhereInput
  }

  /**
   * SurvivorItem upsert
   */
  export type SurvivorItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * The filter to search for the SurvivorItem to update in case it exists.
     */
    where: SurvivorItemWhereUniqueInput
    /**
     * In case the SurvivorItem found by the `where` argument doesn't exist, create a new SurvivorItem with this data.
     */
    create: XOR<SurvivorItemCreateInput, SurvivorItemUncheckedCreateInput>
    /**
     * In case the SurvivorItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurvivorItemUpdateInput, SurvivorItemUncheckedUpdateInput>
  }

  /**
   * SurvivorItem delete
   */
  export type SurvivorItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
    /**
     * Filter which SurvivorItem to delete.
     */
    where: SurvivorItemWhereUniqueInput
  }

  /**
   * SurvivorItem deleteMany
   */
  export type SurvivorItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurvivorItems to delete
     */
    where?: SurvivorItemWhereInput
  }

  /**
   * SurvivorItem without action
   */
  export type SurvivorItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurvivorItem
     */
    select?: SurvivorItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurvivorItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SurvivorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    age: 'age',
    gender: 'gender',
    lastLocation: 'lastLocation',
    infected: 'infected'
  };

  export type SurvivorScalarFieldEnum = (typeof SurvivorScalarFieldEnum)[keyof typeof SurvivorScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const SurvivorItemScalarFieldEnum: {
    id: 'id',
    survivorId: 'survivorId',
    itemId: 'itemId',
    quantity: 'quantity'
  };

  export type SurvivorItemScalarFieldEnum = (typeof SurvivorItemScalarFieldEnum)[keyof typeof SurvivorItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SurvivorWhereInput = {
    AND?: SurvivorWhereInput | SurvivorWhereInput[]
    OR?: SurvivorWhereInput[]
    NOT?: SurvivorWhereInput | SurvivorWhereInput[]
    id?: IntFilter<"Survivor"> | number
    name?: StringFilter<"Survivor"> | string
    age?: IntFilter<"Survivor"> | number
    gender?: StringFilter<"Survivor"> | string
    lastLocation?: JsonFilter<"Survivor">
    infected?: BoolFilter<"Survivor"> | boolean
    inventory?: SurvivorItemListRelationFilter
  }

  export type SurvivorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    lastLocation?: SortOrder
    infected?: SortOrder
    inventory?: SurvivorItemOrderByRelationAggregateInput
  }

  export type SurvivorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SurvivorWhereInput | SurvivorWhereInput[]
    OR?: SurvivorWhereInput[]
    NOT?: SurvivorWhereInput | SurvivorWhereInput[]
    name?: StringFilter<"Survivor"> | string
    age?: IntFilter<"Survivor"> | number
    gender?: StringFilter<"Survivor"> | string
    lastLocation?: JsonFilter<"Survivor">
    infected?: BoolFilter<"Survivor"> | boolean
    inventory?: SurvivorItemListRelationFilter
  }, "id">

  export type SurvivorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    lastLocation?: SortOrder
    infected?: SortOrder
    _count?: SurvivorCountOrderByAggregateInput
    _avg?: SurvivorAvgOrderByAggregateInput
    _max?: SurvivorMaxOrderByAggregateInput
    _min?: SurvivorMinOrderByAggregateInput
    _sum?: SurvivorSumOrderByAggregateInput
  }

  export type SurvivorScalarWhereWithAggregatesInput = {
    AND?: SurvivorScalarWhereWithAggregatesInput | SurvivorScalarWhereWithAggregatesInput[]
    OR?: SurvivorScalarWhereWithAggregatesInput[]
    NOT?: SurvivorScalarWhereWithAggregatesInput | SurvivorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Survivor"> | number
    name?: StringWithAggregatesFilter<"Survivor"> | string
    age?: IntWithAggregatesFilter<"Survivor"> | number
    gender?: StringWithAggregatesFilter<"Survivor"> | string
    lastLocation?: JsonWithAggregatesFilter<"Survivor">
    infected?: BoolWithAggregatesFilter<"Survivor"> | boolean
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    name?: StringFilter<"Item"> | string
    description?: StringNullableFilter<"Item"> | string | null
    survivorItems?: SurvivorItemListRelationFilter
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    survivorItems?: SurvivorItemOrderByRelationAggregateInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    name?: StringFilter<"Item"> | string
    description?: StringNullableFilter<"Item"> | string | null
    survivorItems?: SurvivorItemListRelationFilter
  }, "id">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    name?: StringWithAggregatesFilter<"Item"> | string
    description?: StringNullableWithAggregatesFilter<"Item"> | string | null
  }

  export type SurvivorItemWhereInput = {
    AND?: SurvivorItemWhereInput | SurvivorItemWhereInput[]
    OR?: SurvivorItemWhereInput[]
    NOT?: SurvivorItemWhereInput | SurvivorItemWhereInput[]
    id?: IntFilter<"SurvivorItem"> | number
    survivorId?: IntFilter<"SurvivorItem"> | number
    itemId?: IntFilter<"SurvivorItem"> | number
    quantity?: IntFilter<"SurvivorItem"> | number
    survivor?: XOR<SurvivorRelationFilter, SurvivorWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
  }

  export type SurvivorItemOrderByWithRelationInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    survivor?: SurvivorOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
  }

  export type SurvivorItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    survivorId_itemId?: SurvivorItemSurvivorIdItemIdCompoundUniqueInput
    AND?: SurvivorItemWhereInput | SurvivorItemWhereInput[]
    OR?: SurvivorItemWhereInput[]
    NOT?: SurvivorItemWhereInput | SurvivorItemWhereInput[]
    survivorId?: IntFilter<"SurvivorItem"> | number
    itemId?: IntFilter<"SurvivorItem"> | number
    quantity?: IntFilter<"SurvivorItem"> | number
    survivor?: XOR<SurvivorRelationFilter, SurvivorWhereInput>
    item?: XOR<ItemRelationFilter, ItemWhereInput>
  }, "id" | "survivorId_itemId">

  export type SurvivorItemOrderByWithAggregationInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    _count?: SurvivorItemCountOrderByAggregateInput
    _avg?: SurvivorItemAvgOrderByAggregateInput
    _max?: SurvivorItemMaxOrderByAggregateInput
    _min?: SurvivorItemMinOrderByAggregateInput
    _sum?: SurvivorItemSumOrderByAggregateInput
  }

  export type SurvivorItemScalarWhereWithAggregatesInput = {
    AND?: SurvivorItemScalarWhereWithAggregatesInput | SurvivorItemScalarWhereWithAggregatesInput[]
    OR?: SurvivorItemScalarWhereWithAggregatesInput[]
    NOT?: SurvivorItemScalarWhereWithAggregatesInput | SurvivorItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SurvivorItem"> | number
    survivorId?: IntWithAggregatesFilter<"SurvivorItem"> | number
    itemId?: IntWithAggregatesFilter<"SurvivorItem"> | number
    quantity?: IntWithAggregatesFilter<"SurvivorItem"> | number
  }

  export type SurvivorCreateInput = {
    name: string
    age: number
    gender: string
    lastLocation: JsonNullValueInput | InputJsonValue
    infected?: boolean
    inventory?: SurvivorItemCreateNestedManyWithoutSurvivorInput
  }

  export type SurvivorUncheckedCreateInput = {
    id?: number
    name: string
    age: number
    gender: string
    lastLocation: JsonNullValueInput | InputJsonValue
    infected?: boolean
    inventory?: SurvivorItemUncheckedCreateNestedManyWithoutSurvivorInput
  }

  export type SurvivorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
    inventory?: SurvivorItemUpdateManyWithoutSurvivorNestedInput
  }

  export type SurvivorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
    inventory?: SurvivorItemUncheckedUpdateManyWithoutSurvivorNestedInput
  }

  export type SurvivorCreateManyInput = {
    id?: number
    name: string
    age: number
    gender: string
    lastLocation: JsonNullValueInput | InputJsonValue
    infected?: boolean
  }

  export type SurvivorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurvivorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemCreateInput = {
    name: string
    description?: string | null
    survivorItems?: SurvivorItemCreateNestedManyWithoutItemInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    survivorItems?: SurvivorItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    survivorItems?: SurvivorItemUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    survivorItems?: SurvivorItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type ItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurvivorItemCreateInput = {
    quantity: number
    survivor: SurvivorCreateNestedOneWithoutInventoryInput
    item: ItemCreateNestedOneWithoutSurvivorItemsInput
  }

  export type SurvivorItemUncheckedCreateInput = {
    id?: number
    survivorId: number
    itemId: number
    quantity: number
  }

  export type SurvivorItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    survivor?: SurvivorUpdateOneRequiredWithoutInventoryNestedInput
    item?: ItemUpdateOneRequiredWithoutSurvivorItemsNestedInput
  }

  export type SurvivorItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    survivorId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SurvivorItemCreateManyInput = {
    id?: number
    survivorId: number
    itemId: number
    quantity: number
  }

  export type SurvivorItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SurvivorItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    survivorId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SurvivorItemListRelationFilter = {
    every?: SurvivorItemWhereInput
    some?: SurvivorItemWhereInput
    none?: SurvivorItemWhereInput
  }

  export type SurvivorItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurvivorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    lastLocation?: SortOrder
    infected?: SortOrder
  }

  export type SurvivorAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type SurvivorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    infected?: SortOrder
  }

  export type SurvivorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    infected?: SortOrder
  }

  export type SurvivorSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SurvivorRelationFilter = {
    is?: SurvivorWhereInput
    isNot?: SurvivorWhereInput
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type SurvivorItemSurvivorIdItemIdCompoundUniqueInput = {
    survivorId: number
    itemId: number
  }

  export type SurvivorItemCountOrderByAggregateInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type SurvivorItemAvgOrderByAggregateInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type SurvivorItemMaxOrderByAggregateInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type SurvivorItemMinOrderByAggregateInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type SurvivorItemSumOrderByAggregateInput = {
    id?: SortOrder
    survivorId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type SurvivorItemCreateNestedManyWithoutSurvivorInput = {
    create?: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput> | SurvivorItemCreateWithoutSurvivorInput[] | SurvivorItemUncheckedCreateWithoutSurvivorInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutSurvivorInput | SurvivorItemCreateOrConnectWithoutSurvivorInput[]
    createMany?: SurvivorItemCreateManySurvivorInputEnvelope
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
  }

  export type SurvivorItemUncheckedCreateNestedManyWithoutSurvivorInput = {
    create?: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput> | SurvivorItemCreateWithoutSurvivorInput[] | SurvivorItemUncheckedCreateWithoutSurvivorInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutSurvivorInput | SurvivorItemCreateOrConnectWithoutSurvivorInput[]
    createMany?: SurvivorItemCreateManySurvivorInputEnvelope
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SurvivorItemUpdateManyWithoutSurvivorNestedInput = {
    create?: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput> | SurvivorItemCreateWithoutSurvivorInput[] | SurvivorItemUncheckedCreateWithoutSurvivorInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutSurvivorInput | SurvivorItemCreateOrConnectWithoutSurvivorInput[]
    upsert?: SurvivorItemUpsertWithWhereUniqueWithoutSurvivorInput | SurvivorItemUpsertWithWhereUniqueWithoutSurvivorInput[]
    createMany?: SurvivorItemCreateManySurvivorInputEnvelope
    set?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    disconnect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    delete?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    update?: SurvivorItemUpdateWithWhereUniqueWithoutSurvivorInput | SurvivorItemUpdateWithWhereUniqueWithoutSurvivorInput[]
    updateMany?: SurvivorItemUpdateManyWithWhereWithoutSurvivorInput | SurvivorItemUpdateManyWithWhereWithoutSurvivorInput[]
    deleteMany?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
  }

  export type SurvivorItemUncheckedUpdateManyWithoutSurvivorNestedInput = {
    create?: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput> | SurvivorItemCreateWithoutSurvivorInput[] | SurvivorItemUncheckedCreateWithoutSurvivorInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutSurvivorInput | SurvivorItemCreateOrConnectWithoutSurvivorInput[]
    upsert?: SurvivorItemUpsertWithWhereUniqueWithoutSurvivorInput | SurvivorItemUpsertWithWhereUniqueWithoutSurvivorInput[]
    createMany?: SurvivorItemCreateManySurvivorInputEnvelope
    set?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    disconnect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    delete?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    update?: SurvivorItemUpdateWithWhereUniqueWithoutSurvivorInput | SurvivorItemUpdateWithWhereUniqueWithoutSurvivorInput[]
    updateMany?: SurvivorItemUpdateManyWithWhereWithoutSurvivorInput | SurvivorItemUpdateManyWithWhereWithoutSurvivorInput[]
    deleteMany?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
  }

  export type SurvivorItemCreateNestedManyWithoutItemInput = {
    create?: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput> | SurvivorItemCreateWithoutItemInput[] | SurvivorItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutItemInput | SurvivorItemCreateOrConnectWithoutItemInput[]
    createMany?: SurvivorItemCreateManyItemInputEnvelope
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
  }

  export type SurvivorItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput> | SurvivorItemCreateWithoutItemInput[] | SurvivorItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutItemInput | SurvivorItemCreateOrConnectWithoutItemInput[]
    createMany?: SurvivorItemCreateManyItemInputEnvelope
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SurvivorItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput> | SurvivorItemCreateWithoutItemInput[] | SurvivorItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutItemInput | SurvivorItemCreateOrConnectWithoutItemInput[]
    upsert?: SurvivorItemUpsertWithWhereUniqueWithoutItemInput | SurvivorItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SurvivorItemCreateManyItemInputEnvelope
    set?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    disconnect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    delete?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    update?: SurvivorItemUpdateWithWhereUniqueWithoutItemInput | SurvivorItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SurvivorItemUpdateManyWithWhereWithoutItemInput | SurvivorItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
  }

  export type SurvivorItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput> | SurvivorItemCreateWithoutItemInput[] | SurvivorItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: SurvivorItemCreateOrConnectWithoutItemInput | SurvivorItemCreateOrConnectWithoutItemInput[]
    upsert?: SurvivorItemUpsertWithWhereUniqueWithoutItemInput | SurvivorItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: SurvivorItemCreateManyItemInputEnvelope
    set?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    disconnect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    delete?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    connect?: SurvivorItemWhereUniqueInput | SurvivorItemWhereUniqueInput[]
    update?: SurvivorItemUpdateWithWhereUniqueWithoutItemInput | SurvivorItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: SurvivorItemUpdateManyWithWhereWithoutItemInput | SurvivorItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
  }

  export type SurvivorCreateNestedOneWithoutInventoryInput = {
    create?: XOR<SurvivorCreateWithoutInventoryInput, SurvivorUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SurvivorCreateOrConnectWithoutInventoryInput
    connect?: SurvivorWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutSurvivorItemsInput = {
    create?: XOR<ItemCreateWithoutSurvivorItemsInput, ItemUncheckedCreateWithoutSurvivorItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutSurvivorItemsInput
    connect?: ItemWhereUniqueInput
  }

  export type SurvivorUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<SurvivorCreateWithoutInventoryInput, SurvivorUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: SurvivorCreateOrConnectWithoutInventoryInput
    upsert?: SurvivorUpsertWithoutInventoryInput
    connect?: SurvivorWhereUniqueInput
    update?: XOR<XOR<SurvivorUpdateToOneWithWhereWithoutInventoryInput, SurvivorUpdateWithoutInventoryInput>, SurvivorUncheckedUpdateWithoutInventoryInput>
  }

  export type ItemUpdateOneRequiredWithoutSurvivorItemsNestedInput = {
    create?: XOR<ItemCreateWithoutSurvivorItemsInput, ItemUncheckedCreateWithoutSurvivorItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutSurvivorItemsInput
    upsert?: ItemUpsertWithoutSurvivorItemsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutSurvivorItemsInput, ItemUpdateWithoutSurvivorItemsInput>, ItemUncheckedUpdateWithoutSurvivorItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SurvivorItemCreateWithoutSurvivorInput = {
    quantity: number
    item: ItemCreateNestedOneWithoutSurvivorItemsInput
  }

  export type SurvivorItemUncheckedCreateWithoutSurvivorInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type SurvivorItemCreateOrConnectWithoutSurvivorInput = {
    where: SurvivorItemWhereUniqueInput
    create: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput>
  }

  export type SurvivorItemCreateManySurvivorInputEnvelope = {
    data: SurvivorItemCreateManySurvivorInput | SurvivorItemCreateManySurvivorInput[]
    skipDuplicates?: boolean
  }

  export type SurvivorItemUpsertWithWhereUniqueWithoutSurvivorInput = {
    where: SurvivorItemWhereUniqueInput
    update: XOR<SurvivorItemUpdateWithoutSurvivorInput, SurvivorItemUncheckedUpdateWithoutSurvivorInput>
    create: XOR<SurvivorItemCreateWithoutSurvivorInput, SurvivorItemUncheckedCreateWithoutSurvivorInput>
  }

  export type SurvivorItemUpdateWithWhereUniqueWithoutSurvivorInput = {
    where: SurvivorItemWhereUniqueInput
    data: XOR<SurvivorItemUpdateWithoutSurvivorInput, SurvivorItemUncheckedUpdateWithoutSurvivorInput>
  }

  export type SurvivorItemUpdateManyWithWhereWithoutSurvivorInput = {
    where: SurvivorItemScalarWhereInput
    data: XOR<SurvivorItemUpdateManyMutationInput, SurvivorItemUncheckedUpdateManyWithoutSurvivorInput>
  }

  export type SurvivorItemScalarWhereInput = {
    AND?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
    OR?: SurvivorItemScalarWhereInput[]
    NOT?: SurvivorItemScalarWhereInput | SurvivorItemScalarWhereInput[]
    id?: IntFilter<"SurvivorItem"> | number
    survivorId?: IntFilter<"SurvivorItem"> | number
    itemId?: IntFilter<"SurvivorItem"> | number
    quantity?: IntFilter<"SurvivorItem"> | number
  }

  export type SurvivorItemCreateWithoutItemInput = {
    quantity: number
    survivor: SurvivorCreateNestedOneWithoutInventoryInput
  }

  export type SurvivorItemUncheckedCreateWithoutItemInput = {
    id?: number
    survivorId: number
    quantity: number
  }

  export type SurvivorItemCreateOrConnectWithoutItemInput = {
    where: SurvivorItemWhereUniqueInput
    create: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput>
  }

  export type SurvivorItemCreateManyItemInputEnvelope = {
    data: SurvivorItemCreateManyItemInput | SurvivorItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type SurvivorItemUpsertWithWhereUniqueWithoutItemInput = {
    where: SurvivorItemWhereUniqueInput
    update: XOR<SurvivorItemUpdateWithoutItemInput, SurvivorItemUncheckedUpdateWithoutItemInput>
    create: XOR<SurvivorItemCreateWithoutItemInput, SurvivorItemUncheckedCreateWithoutItemInput>
  }

  export type SurvivorItemUpdateWithWhereUniqueWithoutItemInput = {
    where: SurvivorItemWhereUniqueInput
    data: XOR<SurvivorItemUpdateWithoutItemInput, SurvivorItemUncheckedUpdateWithoutItemInput>
  }

  export type SurvivorItemUpdateManyWithWhereWithoutItemInput = {
    where: SurvivorItemScalarWhereInput
    data: XOR<SurvivorItemUpdateManyMutationInput, SurvivorItemUncheckedUpdateManyWithoutItemInput>
  }

  export type SurvivorCreateWithoutInventoryInput = {
    name: string
    age: number
    gender: string
    lastLocation: JsonNullValueInput | InputJsonValue
    infected?: boolean
  }

  export type SurvivorUncheckedCreateWithoutInventoryInput = {
    id?: number
    name: string
    age: number
    gender: string
    lastLocation: JsonNullValueInput | InputJsonValue
    infected?: boolean
  }

  export type SurvivorCreateOrConnectWithoutInventoryInput = {
    where: SurvivorWhereUniqueInput
    create: XOR<SurvivorCreateWithoutInventoryInput, SurvivorUncheckedCreateWithoutInventoryInput>
  }

  export type ItemCreateWithoutSurvivorItemsInput = {
    name: string
    description?: string | null
  }

  export type ItemUncheckedCreateWithoutSurvivorItemsInput = {
    id?: number
    name: string
    description?: string | null
  }

  export type ItemCreateOrConnectWithoutSurvivorItemsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutSurvivorItemsInput, ItemUncheckedCreateWithoutSurvivorItemsInput>
  }

  export type SurvivorUpsertWithoutInventoryInput = {
    update: XOR<SurvivorUpdateWithoutInventoryInput, SurvivorUncheckedUpdateWithoutInventoryInput>
    create: XOR<SurvivorCreateWithoutInventoryInput, SurvivorUncheckedCreateWithoutInventoryInput>
    where?: SurvivorWhereInput
  }

  export type SurvivorUpdateToOneWithWhereWithoutInventoryInput = {
    where?: SurvivorWhereInput
    data: XOR<SurvivorUpdateWithoutInventoryInput, SurvivorUncheckedUpdateWithoutInventoryInput>
  }

  export type SurvivorUpdateWithoutInventoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurvivorUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: StringFieldUpdateOperationsInput | string
    lastLocation?: JsonNullValueInput | InputJsonValue
    infected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemUpsertWithoutSurvivorItemsInput = {
    update: XOR<ItemUpdateWithoutSurvivorItemsInput, ItemUncheckedUpdateWithoutSurvivorItemsInput>
    create: XOR<ItemCreateWithoutSurvivorItemsInput, ItemUncheckedCreateWithoutSurvivorItemsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutSurvivorItemsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutSurvivorItemsInput, ItemUncheckedUpdateWithoutSurvivorItemsInput>
  }

  export type ItemUpdateWithoutSurvivorItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ItemUncheckedUpdateWithoutSurvivorItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SurvivorItemCreateManySurvivorInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type SurvivorItemUpdateWithoutSurvivorInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    item?: ItemUpdateOneRequiredWithoutSurvivorItemsNestedInput
  }

  export type SurvivorItemUncheckedUpdateWithoutSurvivorInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SurvivorItemUncheckedUpdateManyWithoutSurvivorInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SurvivorItemCreateManyItemInput = {
    id?: number
    survivorId: number
    quantity: number
  }

  export type SurvivorItemUpdateWithoutItemInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    survivor?: SurvivorUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type SurvivorItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    survivorId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SurvivorItemUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    survivorId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SurvivorCountOutputTypeDefaultArgs instead
     */
    export type SurvivorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SurvivorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemCountOutputTypeDefaultArgs instead
     */
    export type ItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SurvivorDefaultArgs instead
     */
    export type SurvivorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SurvivorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SurvivorItemDefaultArgs instead
     */
    export type SurvivorItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SurvivorItemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}